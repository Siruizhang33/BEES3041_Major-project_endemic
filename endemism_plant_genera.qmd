---
title: "Identifying Endemic Australia Plant Genera"
format:
  html:
    embed-resources: true
editor: visual
execute:
  warning: false
  output: true
---

Sirui Zhang

##### 

```{r}
#load libraries 
library(tidyr)       #data wrangling
library(tidyverse)   #data wrangling
library(data.table)  #data wrangling
library(ggplot2)     #plotting
library(austraits)   #for download of austraits
library(rstatix)     #for Wilcox Rank sum test
library(sp)          #for spatial mapping
library(sf)          #for spatial mapping
```

### Read in species lists and occurence data

```{r}
#load in BIG DATA 2022 genera endemism estimate - contains all aus genera
aus_genera <- read.csv("data/genus_level_endemism_estimate.csv")

#load in species lists/occurence data from NZ, NG, NC, Indonesia, WCVP (Kew Gardens), ALA data
wcvp <- fread(file = "data/wcvp_names.csv", header = T)

wcvp_distribution <- fread(file = "data/wcvp_distribution.csv", header = T)

ng <- read.csv("data/papua_new_guinea_checklist.csv")

nz <- read.csv("data/new_zealand_seedplant_checklist.csv")

nz2 <- read.csv("data/new_zealand_ferns_lycophyte_checklist.csv")

nc <- read.csv("data/new_caledonia_checklist.csv")

indo <- read.csv("data/sunda_sahul_checklist.csv")

ala <-read_csv("data/all_ala.csv")

aus_plants <- subset(aus_genera, prop_endemic == 1)

```

### Assessing shared genera between Australia and neighbouring countries

```{r}
# Combine nz and nz2 to create full NZ list, remove "?" from Genus column, remove exotic genera
nz <- bind_rows(nz, nz2) %>% mutate(Genus = gsub("\\?", "", Genus)) %>% filter(Origin != "Exotic")

# Create new columns to confirm presence of genera in NZ, NC, NG, and SSCZ
aus_plants <- aus_plants %>% mutate(nz = genus %in% nz$Genus,
                                  nc = genus %in% nc$Genre,
                                  ng = genus %in% ng$Genus,
                                  indo2 = genus %in% indo[!grepl("Aus", indo$Country) & !grepl("Sin", indo$Country), "Genus"])



```

### Combining WCVP Data and removing records from Australia

```{r}
#combing WCVP distribution file with WCVP records file
wcvp_comb <- wcvp_distribution %>%
  left_join(wcvp, by = 'plant_name_id') 

#removing Australian records 
wcvp_not_aus <- wcvp_comb %>%
  filter(region != "Australia") 

#creating file for Australian records
wcvp_aus <- wcvp_comb %>%
  filter(region == "Australia")

#create new column to confirm presence of genera overseas in WCVP data
aus_plants <- aus_plants %>%
  mutate(wcvp = genus %in% wcvp_not_aus$genus)

```

### Assess proportion of ALA data found inside Australia

```{r}
#add prop_aus column for proportion of points for each genus  and total 
ala1<-ala%>%group_by(genus) %>%
    summarise(prop_aus=(sum(countryCode=="AU",na.rm=T)/sum(!is.na(countryCode))),
              n=sum(!is.na(countryCode)))

#add ALA column

aus_plants <- aus_plants%>%left_join(ala1)%>%
  mutate(ala = prop_aus<0.99)




```

### Initial endemism assessment - endemic, non-endemic, unclear

```{r}
#select rows indicating presence of genera in other datasets
t<-aus_plants %>%
  dplyr::select(nz, nc, ng, wcvp, indo2, ala)

#calculate rowsums for 'TRUE' scores  and create new column indicating endemism assessment - unclear where only 1 dataset includes genera records outside of australia
aus_plants <- aus_plants %>%
  mutate(rowsums = rowSums(t),
         current_knowledge = case_when(
           rowsums >= 2 ~ "non-endemic",
           rowsums == 1 ~ "unclear",
           rowsums == 0 ~ "endemic"
         ))

          
```

### Update endemism assessments after manual assessment of unclears

```{r message=FALSE}
#create new df with only 'unclear' genera
unclear <- aus_plants[aus_plants$current_knowledge == 'unclear', ]

#add reason column, to denote reason for confirming endemic/non-endemic status
unclear$reason <- NA
unclear$current_knowledge<-c('endemic' , 'non-endemic', 'endemic' , 'endemic' 
, 'endemic' ,'endemic','endemic','non-endemic', 'non-endemic', 'non-endemic'
,'endemic', 'endemic', 'endemic', 'endemic','endemic','non-endemic','endemic'
, 'endemic','non-endemic','endemic', 'non-endemic','endemic','non-endemic'
,'endemic', 'non-endemic','non-endemic','endemic', 'non-endemic', 'non-endemic'
, 'non-endemic', 'endemic', 'endemic','non-endemic', 'endemic', 'non-endemic'
, 'endemic','endemic', 'endemic', 'endemic', 'non-endemic', 'endemic'
, 'non-endemic', 'endemic' ,'non-endemic' ,'endemic' ,'endemic', 'endemic'
,'endemic', 'endemic', 'non-endemic','non-endemic','endemic', 'endemic'
,'endemic','endemic' ,'non-endemic' ,'non-endemic' ,'endemic' ,'non-endemic'
, 'non-endemic' ,'non-endemic', 'endemic' ,"non-endemic",'non-endemic' ,'non-endemic','endemic','endemic'
,'non-endemic', 'endemic','endemic','non-endemic','endemic','endemic','non-endemic','non-endemic'
,'endemic', 'endemic','endemic','non-endemic','non-endemic','non-endemic', 'endemic'
, 'endemic', 'non-endemic' ,'non-endemic' ,'non-endemic', 'non-endemic')

unclear$reason<-c(        'ALA taxonomy error', 'taxonomy error', 'POWO data error', 'records from 1950s, PNG occurrence from NSW Bot Gardens',
        'POWO data error', 'Indo data error', 'POWO data error', 'NC occurrence', 'taxonomic error - synonym Machaerina used',
        'PNG native', 'ALA data/shapefile error', 'ALA data/shapefile error', 'ornamental plant in UK',
        'taxonomic uncertainty - WCVP says 4 species, Zimbabwe flora mentions only 1 accepted species',
        'NG data error', 'taxonomy error, NZ species', 'introduced NZ and California', 'introduced India',
        'species found in South America', 'introduced ornamentals in UK',
        'species found in Africa, Americas, South Asia etc', 'taxonomic confusion, Tasmania only',
        'species found in Africa, Americas, South Asia etc', 'taxonomic error in Indo data', 'found in Americas',
        'found in PNG POWO taxonomic confusion', 'POWO error', 'taxonomic uncertainty', 'dist in South America',
        'dist in PNG', 'introduced to India - POWO mismatch', 'ALA error (Georgiella species entered as Georgeantha)',
        'Madagascar distribution', 'introduced to New Zealand - POWO mismatch', 'taxonomic confusion - synonym w justicia',
        'endemic to lord howe - record in NZ?', 'taxonomic confusion - unplaced in POWO', 'ALA data error',
        'ALA data error', 'distribution in Chile', 'ALA data error', 'species found in Africa, Asia, Australia',
        'Indo data error', 'species endemic to Norfolk Island', 'introduced to NZ and India', 'ALA data error',
        'ALA data error', 'introduced to India', 'introduced to Czechia', 'species found in Americas and Australia',
        'species found in Europe, Africa, Asia, Australia', 'WCVP data error', 'ALA data error',
        'introduced to Great Britain', 'introduced to Great Britain', 'synonym for Ochrosia, found across SE & E Asia',
        'synonym for Apostasia, found in SE Asia', 'Limited PNG occurrence - introduced, flagged as basis of record invalid',
        'Known to be native to Bolivia and Chile', 'Known to be native to Mexico and South America',
        'Cosmopolitan genera - synonym: Hemionitis', 'Data error - single preserved specimen from PNG',
        'synonym for Arthrochilus- single sp. in PNG', 'synonym for Phreatia', 'synonym for Caltha',
        'WCVP Data error - single 200 year old record in NZ', 'Data duplication of incorrect point',
        'synonym for Phreatia', 'Introduced and grown as an ornamental', 'Introduced into NZ, UK, & USA',
        'Synonym with Goodenia', 'wcvp incorrect, found in PNG', 'Taxonomy mix up', 'Found in PNG and Malaysia as well',
        'Synonym with Brachypterum, found in southern Asia', 'Outlier in Indo data, only one point',
        'Introduced to Britain', 'Small numbers outside, botanical gardens', 'Synonym with Aleurites',
        'Synonym with Ardisia', 'Found in South America as well',
        'Error in occurrence data, single occurrences outside Australia (oriental/botanical gardens)', 'taxonomic within genus',
        'Native to US and found elsewhere in the world', 'Found in NZ, ALA incorrect',
        'Found in New Caledonia and Papua New Guinea', 'Found in Myanmar')

#remove unclears from aus_plants df
aus_plants <- aus_plants[aus_plants$current_knowledge != "unclear", ]

#add back now classified 'unclear' genera
aus_plants <- rbind(aus_plants, unclear[1:13])

#order alphabetically
aus_plants <- aus_plants[order(aus_plants$genus), ]

#rename current_knowlege column to endemism_status
colnames(aus_plants)[colnames(aus_plants) == 'current_knowledge'] <- 'endemism_status'

#save register of endemic plant genera
aus_plants[ , c(1, 3, 13)] %>% 
  filter(endemism_status == 'endemic') %>%
  write_csv('data_out/register_of_endemic_plant_genera.csv')
```

### Combine endemic and non-endemic genera for trait/IUCN comparison

```{r}
# Create non-endemic subset where proportion endemic Australian species was < 1
non_end <- aus_genera %>%
  filter(prop_endemic < 1)

# Create endemism classification column
non_end <- non_end %>%
  mutate(endemism_status = 'non-endemic')

# Combine non-endemic and aus_plants dataframes to represent all Australian genera with classification
all_aus_genera <- bind_rows(select(non_end, genus, endemism_status), select(aus_plants, genus, endemism_status))


```

### Adding Threatened Status from IUCN data

```{r}
#read in red list data 
simple_summary <- read.csv(file = "data/simple_summary.csv", header = T)%>%
  filter(genusName %in% all_aus_genera$genus) %>%mutate(redlistCategory = gsub("Lower Risk/(conservation dependent|near threatened)", "Lower Risk", redlistCategory))%>%
  filter(redlistCategory != "Extinct")

#Creating counts frame for each threatened status
counts <- simple_summary %>% 
  group_by(genusName) %>%
  count(redlistCategory) %>%
  pivot_wider(names_from =redlistCategory, values_from = n, values_fill = NA) 


# Join the counts with fivesource.trial based on genera2
all_aus_status <- all_aus_genera  %>%
  left_join(counts, by = c("genus" = "genusName")) %>% 
  #remove NAs
  mutate_at(c(3:9), ~replace_na(.,0))

write_csv(all_aus_status, 'data_out/all_genera_with_threatened_status.csv')


```

## Adding Austraits data - dispersal + growth form traits

```{r}
#load austraits
#devtools::install_github("traitecoevo/austraits")
#austraits <- load_austraits(version = "4.1.0", path = "intro/downloads")
austraits <- readRDS("austraits-4.1.0.rds")

#make genus_list from our australian genera df
genus_list <- all_aus_genera$genus

#now select the categorical traits we want to extract - dispersal appendage, syndrome, plant growth form using the extract_trait function
cat_traits <- austraits %>% extract_trait(c('dispersal_syndrome', 'plant_growth_form'))

#join traits to produce dataframe 
cat_traits_joined <- left_join(cat_traits[["traits"]], cat_traits[["taxa"]], by = "taxon_name")

#keep only records for genera on our australian genera list
cat_traits_joined <- cat_traits_joined%>%filter(genus %in% genus_list)

austraits_genera <- cat_traits_joined %>%
  select(genus, trait_name, value) %>%
  pivot_wider(names_from = trait_name, values_from = value, values_fn = max)

#now the same for seed_traits
disp_traits <- austraits %>% extract_trait(c('seed_dry_mass', 'plant_height'))

#seed traits joined
disp_traits_joined <- left_join(disp_traits[["traits"]], disp_traits[["taxa"]], by = "taxon_name")

#keep only records for genera on our australian genera list
disp_traits_joined <- disp_traits_joined%>%filter(genus %in% genus_list)

#pivot df such that each row is a genus from the australian genera list, and the mean of recorded dry_seed_mass are applied for each genus
disp_genera <- disp_traits_joined %>%
  select(genus, trait_name, value) %>%
  pivot_wider(names_from = trait_name, values_from = value, values_fn = mean)


#add categorical traits and numerical seed mass traits together
austraits_genera <- left_join(austraits_genera, disp_genera, by = 'genus')

#write csv for all australian genera with traits
write_csv(austraits_genera, 'data_out/all_genera_with_traits.csv')
```

### Wilcox Rank sum test - dry seed mass & plant height

```{r}
# Adding the endemism status to the dataframe for subsequent plotting and tests
genera <- merge(austraits_genera, all_aus_genera[1:2], by = 'genus', all.x = TRUE)

# Wilcox rank sum test for seed_dry_mass
seed_test <- genera %>%
  wilcox_test(seed_dry_mass ~ endemism_status) %>%
  add_significance()
seed_test 

# Wilcox rank sum test for plant_height
height_test <- genera %>%
  wilcox_test(plant_height ~ endemism_status) %>%
  add_significance()
height_test 


```

### Seed mass results - violin plot

```{r}
#plotting of seed_dry_mass - violin plot w boxplot
violin_seed <- ggplot(genera, aes(x = endemism_status, y = seed_dry_mass, fill = endemism_status)) +
  geom_violin() +scale_fill_brewer() +labs(fill = 'Endemic status', x = 'Endemic status', y = 'log dry seed mass (mg)', title = 'Mean seed mass of endemic and non-endemic genera') + 
  theme_bw() +
  scale_y_log10(labels = function(x) sprintf("%.0f", x)) +#remove sci notation+
  geom_boxplot(width=0.05)

violin_seed

```

### Plant height results - violin plot

```{r }
#plant height plots - violin w boxplot
violin_height <- ggplot(genera, aes(x = endemism_status, y = plant_height, fill = endemism_status)) +
  geom_violin() +
  scale_fill_brewer() +
  labs(title = 'Mean plant height of endemic and non-endemic genera', fill = 'Endemic status', x = 'Endemic status', y = 'log plant height (cm)') + 
  theme_bw()  +
  scale_y_log10(labels = function(x) sprintf("%.0f", x)) + 
  geom_boxplot(width=0.05) 

violin_height
```

### Simplifying growth forms

```{r }
# Simplify growth form categories
genera <- genera %>%
  mutate(growth_form_simp = case_when(
    startsWith(plant_growth_form, "climber") ~ "climber",
    startsWith(plant_growth_form, "fern") ~ "fern",
    startsWith(plant_growth_form, "graminoid") ~ "graminoid",
    startsWith(plant_growth_form, "shrub") | grepl("shrub", plant_growth_form, ignore.case = TRUE) ~ "shrub",
    startsWith(plant_growth_form, "tree") ~ "tree",
    startsWith(plant_growth_form, "herb") ~ "herb",
    TRUE ~ plant_growth_form
  ))

# Calculate proportion of each simplified growth form
proportions <- genera %>%
  group_by(endemism_status, growth_form_simp) %>%
  summarize(count = n()) %>%
  group_by(endemism_status) %>%
  mutate(proportion = count / sum(count))%>%
  filter(!(growth_form_simp %in% c("palmoid", "lycophyte", "graminoid")))

# Plot growth forms as a proportion of total number of endemic and non-endemic genera
growth_bar <- ggplot(proportions, aes(x = endemism_status, y = proportion, fill = growth_form_simp)) +
  geom_bar(stat = "identity") +
  labs(x = "Endemism Status", y = "Proportion of genera in each category", title = "Plant growth forms of endemic and non-endemic genera", fill = 'Simplified growth form') +
  theme_bw() 

growth_bar

```

### Chi Squared test for plant growth form

```{r}
#contingency table for growth form
cont_form <- table(genera$growth_form_simp, genera$endemism_status)

#chi square test
chi_form <- chisq.test(cont_form, correct = F)

chi_form
```

### Dispersal syndrome - plots

```{r}
ggplot(genera, aes(x = endemism_status, fill = dispersal_syndrome)) +
  geom_bar() +
  theme_bw()

#filter data into main categories
dispersal_filtered <- genera %>%
  filter(dispersal_syndrome %in% c('anemochory', 'hydrochory', 'barochory', 'endozoochory', 'zoochory', 'myrmecochory', 'epizoochory'))

proportions_disp <- dispersal_filtered %>%
  mutate(dispersal_syndrome = ifelse(dispersal_syndrome %in% c('epizoochory', 'endozoochory'), 'zoochory', dispersal_syndrome))%>%
  group_by(endemism_status, dispersal_syndrome) %>%
  summarize(count = n()) %>%
  group_by(endemism_status) %>%
  mutate(proportion = count / sum(count))

#display dispersal syndrome plot, proportion to total number in each category
disp_plot <- ggplot(proportions_disp, aes(x = endemism_status, y = proportion, fill = dispersal_syndrome)) +
  geom_bar(stat = "identity") +
  labs(x = "Endemism Status", y = "Proportion of genera in each category", title = "Dispersal syndromes of endemic and non-endemic genera", fill = 'Primary dispersal syndrome') +
  theme_bw() +
  scale_fill_brewer(palette = "Spectral")

disp_plot

```

### Chi square test - dispersal syndrome

```{r}
#create contingency table for chi square test
cont_disp <- table(dispersal_filtered$endemism_status, dispersal_filtered$dispersal_syndrome)

#perform chi square test
chi_disp <- chisq.test(cont_disp, correct = F)

chi_disp
```

### Threatened status - plots

```{r }
#produce df which counts data by endemism status and threatened status
threat_all <- all_aus_status %>%
  group_by(endemism_status) %>%
  summarize(across(matches("Least Concern|Critically Endangered|Endangered|Near Threatened|Vulnerable|Data Deficient|Lower Risk"), sum, na.rm = TRUE)) %>%
  pivot_longer(cols = matches("Least Concern|Critically Endangered|Endangered|Near Threatened|Vulnerable|Data Deficient|Lower Risk"),
               names_to = "threat_status",
               values_to = "count") %>%
  group_by(endemism_status) %>%
  mutate(proportions = count / sum(count))

#order the threatned status in order of severity
threat_order <- c("Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Lower Risk", "Least Concern", "Data Deficient")

# apply this as a factor with the defined order so that plots display preferred order
threat_all$threat_status <- factor(threat_all$threat_status, levels = threat_order)

#proportional bar chart plot 
threat_bar <- ggplot(threat_all, aes(x = endemism_status, y = proportions, fill = threat_status)) +
  geom_bar(stat = "identity") +
  labs(x = "Endemism Status", y = "Proportion of genera in each category", title = "IUCN threatened status of endemic and non-endemic genera", fill = 'IUCN threatened status') +
  theme_bw() +  
  scale_fill_brewer(palette = "RdYlGn")

threat_bar
```

### Threatened status - chi square test

```{r }

threat_status <- uncount(threat_all[1:3], weights = count) #remove proportion by selecting rows 1-3

#create contingency table for chi square
cont_status <- table(threat_status$endemism_status, threat_status$threat_status)

#chi square test
chi_status <- chisq.test(cont_status, correct = F)

chi_status
```

### Bioregion mapping - genera per bioregion

```{r warning=FALSE}
##Calculate genera per bioregion and map

#read in endemic genera points - sourced from ALA and filtered to endemics
points <- read.csv('data/locations_endemic_genera.csv')

#convert species points to sp object with point geometries
species_points_sf <- points %>% 
  st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), 
           crs = st_crs(4326))

#install ibra7_albers map
#remotes::install_github("johnbaums/things")

#read ibra7_albers spatial polygon dataframe. has >9000 polygons but only 89 ibra7_albers
library(things)
data(ibra7_albers)


#transform to WGS84 projection - matching points projection
ibra7_albers <- spTransform(ibra7_albers,CRS("+init=EPSG:4326"))

#convert to sf object
ibra7_albers_df <- st_as_sf(ibra7_albers)

#apply bioregion location to species occurence
species_bioregion_sf <- st_join(species_points_sf, ibra7_albers_df, join = st_within)

#calculate unique genera per bioregion - rather than occurences (reduces bias of oversampled urban areas)
unique_genera_bioregion_sf <- species_bioregion_sf %>%
  distinct(REG_NAME_7, genus, .keep_all = TRUE) 

#calculate genera per bioregion
genera_counts_per_bioregion <- unique_genera_bioregion_sf %>%
  group_by(REG_NAME_7) %>%
  summarise(genera_count = n(), REG_NAME_7 = first(REG_NAME_7))

# merged polygons into 89 ibra7_albers for better visualisation
IBRA_grid_bio_gen <- ibra7_albers_df %>%
  group_by(REG_NAME_7) %>%
  summarise(geometry = st_union(geometry)) %>%
  ungroup()%>%
  as_tibble() %>%
  mutate(id = REG_NAME_7) %>%
  full_join(genera_counts_per_bioregion,
            by = join_by(id == REG_NAME_7)) %>%
  st_as_sf()

#plot counts of genera per bioregion
bio_gen_count <- ggplot() +
  geom_sf(data = IBRA_grid_bio_gen, aes(fill = genera_count), size = .01) +
  scale_fill_gradientn(colours = c("orange", "blue"), 
                       na.value = "white", 
                       labels = scales::comma_format(), 
                       n.breaks = 6,
                       guide = guide_colourbar(title = "endemic genera")) +
  coord_sf(ylim = c(-45, -10), 
           xlim = c(110, 155)) +
  labs(x = 'longtiude', y = 'latitude') +
  theme_bw() 

bio_gen_count
```

### Bioregion mapping - genera per bioregion, normalised by area

```{r}
##Calculate species richness normalised by bioregion area + map

#create area column
IBRA_grid_bio_gen$area <- NA

# create area column
IBRA_grid_bio_gen <- IBRA_grid_bio_gen %>%
  mutate(area = st_area(IBRA_grid_bio_gen[1])) %>%
  mutate(prop_count = genera_count / area) %>%
  mutate(prop_count = gsub("\\s*\\[1/m²\\]", "", prop_count))%>%
  mutate(prop_count = as.numeric(prop_count))%>%
  mutate(prop_count = prop_count * 1000000)

# plot normalised species richness
bioregion_prop_gen <- ggplot() +
  geom_sf(data = IBRA_grid_bio_gen, aes(fill = prop_count), size = .01) +
  scale_fill_gradientn(
    colours = c("orange", "blue"),
    na.value = "white",
    trans = "log10", # scale in log format for best visualisation
    labels = scales::comma_format(), # remove sci. notation
    n.breaks = 6,
    guide = guide_colourbar(title = "endemic genera \nper km²")
  ) +
  coord_sf(ylim = c(-45, -10), 
           xlim = c(110, 155)) +
  labs(x = 'longitude', y = 'latitude') +
  theme_bw()

bioregion_prop_gen
```

### Secondary analysis - regional endemism of genera

```{r}
##Calculate ibra7_albers which contain genera found only within their bioregion

bioregion_counts <- unique_genera_bioregion_sf %>%
  group_by(genus) %>%
  summarise(unique_regions = n_distinct(REG_NAME_7), REG_NAME_7 = first(REG_NAME_7)) %>%
  filter(unique_regions == 1) %>%
  group_by(REG_NAME_7) %>%
  summarise(regionally_endemic_genera_count = n())%>% arrange( desc(regionally_endemic_genera_count))


#print the top 5 regions containing endemic genera
head(bioregion_counts, 5)

```
